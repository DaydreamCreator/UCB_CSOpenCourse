INTRODUCTION
Java is an [object oriented] language with strict requirements:
  - Every Java file must contain a class declaration*.
  - All code lives inside a class*, even helper functions, global constants, etc.
  - To run a Java program, you typically [define a main method] using ->>> public static void main(String[] args)
   *  This is not completely true, e.g. we can also declare “interfaces” in .java files that may contain code

Features
1. [ Statically Typed ]
  - All variables, parameters, and methods must have a declared type.
  - That type can never change.
  - Expressions also have a type, e.g. “larger(5, 10) + 3” has type int.
  - [Type Prechecked] The compiler checks that all the types in your program are compatible before the program ever runs!
      e.g. String x = larger(5, 10) + 3 will fail to compile.
      This is unlike a language like Python, where type checks are performed DURING execution.
2. [ Compilation and Interpretation Separated ]
    hello.java ===compiler javac===> hello.class ===interpreter java===> stuff happens

    why make a class file at all?
     - .class file has been type checked. Distributed code is safer.
     - .class files are ‘simpler’ for machine to execute. Distributed code is faster.
     - Minor benefit: Protects your intellectual property. No need to give out source.


CLASSES IN JAVA
Defining and Instantiating Classes
  Every method (a.k.a. function) is associated with some class.
  To run a class, we must define a main method.
    - Not all classes have a main method!
e.g.

public class Dog {
    public int weightInPounds;         // [ Instance variable ]. Can have as many of these as you want.
 
    public Dog(int startingWeight) {   // [Constructor] (similar to a method, but not a method). Determines how to instantiate the class.
        weightInPounds = startingWeight;
    }
    
    // Non-static method, a.k.a. [ Instance Method ]
    // If the method is going to be invoked by an instance of the class, then it should be non-static. 
    public void makeNoise() {           // Can’t be run directly, since there is no main method.
        if (weightInPounds < 10) {
            System.out.println("yipyipyip!");
        } else if (weightInPounds < 30) {
            System.out.println("bark. bark.");
        } else {
            System.out.println("woof!");
  	    }
    }
    // Roughly speaking: If the method needs to use “my instance variables”, the method must be non-static.
}

public class DogLauncher {
   public static void main(String[] args) {
      Dog hugeDog = new Dog(150);         // new instances(objects) of Dog class
      hugeDog.size;                       // guaranteed to exist
      hugeDog.name = "frank";             // syntax error!
      // Cannot add new instance variables to a Dog. They must ALL obey the blueprint exactly.
   }
}

// another DogLauncher example
public class DogLauncher {
   public static void main(String[] args) { 
      Dog smallDog;               // Declaration of a Dog variable
      new Dog(20);                // Instantiation of the Dog class as a Dog Object 
      smallDog = new Dog(5);      // Instantiation and Assignment -> "Constructed"
      Dog hugeDog = new Dog(150); // Declaration, Instantiation and Assignment (one step)
      smallDog.makeNoise();
      hugeDog.makeNoise();        // The dot notation means that we want to use a member of hugeDog
                                  // a member of class = a method(function) or a variable

   }
}

Static vs. Instance Members

[ Static Methods ]
Key differences between static and non-static (a.k.a. instance) methods:
  - Static methods are invoked using the class name, e.g. Dog.makeNoise();
      comments by C: static methods do not rely on the variables of instances but can run independently
  - Instance methods are invoked using an instance name, e.g. maya.makeNoise();
  - Static methods can’t access “my” instance variables, because there is no “me”(BUT the class).

Why static method?
  Some classes are never instantiated. For example, Math.
    x = Math.round(5.6);
    Sometimes, classes may have a mix of static and non-static methods
    
[ Static Variables(dangerous) ]
Warning: Strongly recommended to avoid static variables whose values change.
   - Leads to complicated code: Becomes hard to mentally keep track of which parts of your program 
   read and write from/to the static variable.

A class may have a mix of static and non-static members.
  - A variable or method defined in a class is also called a member of that class. 
  - Static members are accessed using class name, e.g. Dog.binomen.
  - Non-static members cannot be invoked using class name: NONO to use Dog.makeNoise()
  - Static methods must access instance variables via a specific instance. 




