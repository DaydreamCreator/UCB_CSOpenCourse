[ Values ]
  Programs manipulate [values].      
    e.g., 'ahoy'
    - Each value has a certain [data type].
      e.g., integers, floats, booleans, strings

[ Expressions(with operators) ]
  An expression describes a computation and evaluates to a value.
    e.g., 18+69, 6/23, 2**10, 'a'+'hoy'

[ Call Expressions ]
  Call expressions use function calls.
    e.g., pow(2, 10), max(50, 100)

Expressions(with operations) <=> Call Expressions
(can be expressed equivalently)

PS:
  pow() is a [built-in] function; it is provided in every Python environment.
  add(), div(), etc can be imported from the [operator] module in Python STD library.

[ Expression tree ] 
  When evaluating nested expressions, expressions are evaluated from the subtree to the root (inner->outer)


[ Name ]
  A name can be bound(tied) to a value.
  One way to bind(tie with) a name is using an [assignment statement].
    e.g., (name)x = (value)7 (or an expression)

[ Variable ]
  A name that's bound to a data value is also know as variable.
  
[ Function ]
  A function is a sequence of code that performs a particular task can be easily reused.
  [arguments] [return value]
    ps: arguments can be in any expressions
        function executions would terminate by return statement if exists
        
 -------->
  defining functions in py: 
  
    def <name>(<paraments>):    # function signature
      return <expression>       # function body, can have multiple lines
 <--------
 
 [ Names and environments ]
  All python code is evaluated in the context of an environment, which is a sequence of frames.
 
 ----------------------------------------------- Sample codes Start--------------------------------------------------
 from operator import add     # must import
 
 def add(num1, num2):
    sum = num1 + num2         # Function local frame, child of Global frame
    return sum
 result = add(2, 4)           # Global fram
 
 >>> f = max
 >>> f
<built-in function max>

Type conversion
>>> print( float(4) )
>>> 4.0
>>> print( str(4) + str(2) )
>>> 42
>>> print( int("4") + int("2") )
6

Expressions and Operators
addition +
subtraction -
multiplication *
division /
int division //
exponentiation pow
modulus (mod) %



----------------------------------------------- Sample codes End-------------------------------------------------
  Name lookup rules:
   How Python looks up names in a user-defined function:
    1. Look it up in the local frame
    2. If name isn't in local frame, look it up in the global frame
    3. If name isn't in either frame, throw a NameError
   * simplified version
  
 
